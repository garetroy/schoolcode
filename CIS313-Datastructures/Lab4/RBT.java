public class RBT<E extends Comparable<E>> {    private Node<E> root;    private Node<E> nil;    public RBT(){root = null; nil = new Node<E>(null); nil.setColor('B'); root = nil;}    public Node<E> getRoot(){        return root;    }    public void insert(E data){        if (search(data) != nil) {            return;        }        Node<E> node = new Node<E>(data);        node.setColor('R');        if (root == nil) {            root = node;            root.setParent(nil);            root.setLeftChild(nil);            root.setRightChild(nil);            root.setColor('B');            return;        }        Node<E> curr = root;        boolean flag = true;        while (flag) {            if (curr.getData().compareTo(data) < 0) {                if (curr.getRightChild() == nil) {                    curr.setRightChild(node);                    node.setParent(curr);                    flag = false;                } else {                    curr = curr.getRightChild();                }            } else {                if (curr.getLeftChild() == nil) {                    curr.setLeftChild(node);                    node.setParent(curr);                    flag = false;                } else {                    curr = curr.getLeftChild();                }            }        }        node.setLeftChild(nil);        node.setRightChild(nil);        fixInsert(node);    }    private void fixInsert(Node<E> z){        while(z.getParent().getColor()=='R'){            if(z.getParent()==z.getParent().getParent().getLeftChild()){                Node<E> y = z.getParent().getParent().getRightChild();                if(y.getColor()=='R'){                    z.getParent().setColor('B');                    y.setColor('B');                    z.getParent().getParent().setColor('R');                    z = z.getParent().getParent();                }else if(z == z.getParent().getRightChild()){                    z = z.getParent();                    leftRotate(z);                }else{                    z.getParent().setColor('B');                    z.getParent().getParent().setColor('R');                    rightRotate(z.getParent().getParent());                }            }else{                Node<E> y = z.getParent().getParent().getLeftChild();                if(y.getColor()=='R'){                    z.getParent().setColor('B');                    y.setColor('B');                    z.getParent().getParent().setColor('R');                    z = z.getParent().getParent();                }else if(z == z.getParent().getLeftChild()){                    z = z.getParent();                    rightRotate(z);                }else{                    z.getParent().setColor('B');                    z.getParent().getParent().setColor('R');                    leftRotate(z.getParent().getParent());                }            }        }        root.setColor('B');    }    public Node<E> search(E data){        boolean done = false;        Node<E> temp = root;        while(!done){            if (temp == nil){                return nil;            }            if(temp.getData().compareTo(data) == 0){                done = true;            } else if (temp.getData().compareTo(data) > 0){                temp = temp.getLeftChild();            } else if (temp.getData().compareTo(data) < 0){                temp = temp.getRightChild();            }        }        return temp;    }    public void delete(E data) {        Node<E> z = search(data);        if(z == nil){            return;        }        Node<E> y   = z;        Node<E> x   = nil;        char    ori = z.getColor();        if(z.getLeftChild() == nil){            x = z.getRightChild();            transplant(z,z.getRightChild());        } else if(z.getRightChild() == nil){            x = z.getLeftChild();            transplant(z,z.getLeftChild());        } else {            y   = getMin(z.getRightChild());            ori = y.getColor();            x   = y.getRightChild();            if(y.getParent() == z){                x.setParent(y);            }            transplant(z,y);            y.setLeftChild(z.getLeftChild());            y.getLeftChild().setParent(y);            y.setRightChild(z.getRightChild());            y.getRightChild().setParent(y);            y.setColor(z.getColor());        }        if(ori == 'B'){            fixDelete(x);        }    }    private void fixDelete(Node<E> z) {        Node<E> w = nil;        while (z != root && z.getColor() == 'B') {            if (z.getParent().getLeftChild() == z) {                w = z.getParent().getRightChild();                if (w.getColor() == 'R') {                    w.setColor('B');                    z.getParent().setColor('R');                    leftRotate(z.getParent());                    w = z.getParent().getRightChild();                }                if (w.getLeftChild().getColor() == 'B' && w.getRightChild().getColor() == 'B') {                    w.setColor('R');                    z = z.getParent();                } else {                    if (w.getRightChild().getColor() == 'B') {                        w.getLeftChild().setColor('B');                        w.setColor('R');                        rightRotate(w);                        w = z.getParent().getRightChild();                    }                    w.setColor(z.getParent().getColor());                    z.getParent().setColor('B');                    w.getRightChild().setColor('B');                    leftRotate(z.getParent());                    z = root;                }            } else {                w = z.getParent().getLeftChild();                if (w.getColor() == 'R') {                    w.setColor('B');                    z.getParent().setColor('R');                    rightRotate(z.getParent());                    w = z.getParent().getLeftChild();                }                if (w.getRightChild().getColor() == 'B' && w.getLeftChild().getColor() == 'B') {                    w.setColor('R');                    z = z.getParent();                } else {                    if (w.getLeftChild().getColor() == 'B') {                        w.getRightChild().setColor('B');                        w.setColor('R');                        leftRotate(w);                        w = z.getParent().getLeftChild();                    }                    w.setColor(z.getParent().getColor());                    z.getParent().setColor('B');                    w.getLeftChild().setColor('B');                    rightRotate(z.getParent());                    z = root;                }            }        }        z.setColor('B');    }    private Node<E> getMin(Node<E> subRoot) {        Node<E> curr = subRoot;        while (curr.getLeftChild() != nil) {            curr = curr.getLeftChild();        }        return curr;    }    public void traverse(String order, Node<E> top) {        if (top != nil){            switch (order) {                case "preorder":                    System.out.print(top.getData() + " ");                    traverse("preorder",top.getLeftChild());                    traverse("preorder",top.getRightChild());                    break;                case "inorder":                    traverse("inorder",top.getLeftChild());                    System.out.print(top.getData() + " ");                    traverse("inorder",top.getRightChild());                    break;                case "postorder":                    traverse("postorder",top.getLeftChild());                    traverse("postorder",top.getRightChild());                    System.out.print(top.getData() + " ");                    break;                default:                    break;            }        }    }    public void rightRotate(Node<E> y){        Node<E> x = y.getLeftChild();        y.setLeftChild(x.getRightChild());        if(x.getRightChild() != nil){            x.getRightChild().setParent(y);        }        x.setParent(y.getParent());        if(y.getParent() == nil){            root = x;        } else if(y == y.getParent().getRightChild()){            y.getParent().setRightChild(x);        } else {            y.getParent().setLeftChild(x);        }        x.setRightChild(y);        y.setParent(x);    }    public void leftRotate(Node<E> x){        Node<E> y = x.getRightChild();        x.setRightChild(y.getLeftChild());        if(y.getLeftChild() != nil){            y.getLeftChild().setParent(x);        }        y.setParent(x.getParent());        if(x.getParent() == nil){            root = y;        } else if(x == x.getParent().getLeftChild()){            x.getParent().setLeftChild(y);        } else {            x.getParent().setRightChild(y);        }        y.setLeftChild(x);        x.setParent(y);    }    private void transplant(Node<E> u, Node<E> v){        if(u.getParent() == nil){            root = v;            if(v.getParent().getLeftChild() == v){                v.getParent().setLeftChild(nil);            } else {                v.getParent().setRightChild(nil);            }        } else if(u == u.getParent().getLeftChild()){            u.getParent().setLeftChild(v);        } else {            u.getParent().setRightChild(v);        }        v.setParent(u.getParent());    }}