public class MaxHeap<E extends Comparable> {    private E[] myArray;    private int maxSize;    private int length;    public MaxHeap(int s){    	maxSize = s;    	length  = 0;        //@SuppressWarnings("unchecked")        myArray = (E[])(new Comparable[maxSize + 1]);    }	// helper functions    public E[] getArray(){        return myArray;    }    public void setArray(E[] newArray){    	if (newArray.length > maxSize){    		return;    	}        myArray = newArray;        length = newArray.length-1;    }    public int getMaxSize(){        return maxSize;    }    public void setMaxSize(int ms){        maxSize = ms;    }    public int getLength(){        return length;    }    public void setLength(int l){        length = l;    }    private E getLeftChild(int i) {return myArray[i*2];}    private E getRightChild(int i) {return myArray[i*2+1];}    private int getParentIndex(int i){        return (int)Math.floor(i/2);    }    public Comparable<E> maximum(){        return myArray[1];    }    private void swap(int position1, int position2){        E temp             = myArray[position1];        myArray[position1] = myArray[position2];        myArray[position2] = temp;    }    // Other Methods    public void insert(E data){        if(length == maxSize){            return;        }        length++;        myArray[length] = data;        bubbleup();    }    private void bubbleup(){        int position1 = length;        int position2 = getParentIndex(length);        if(position1 == 0 || position2 == 0){            return;        }        while((position1 != position2) && (myArray[position1].compareTo(myArray[position2]) == 1)){            swap(position1,position2);            position1 = position2;            position2 = getParentIndex(position1);            if(position2 == 0){                return;            }        }    }    public Comparable<E> extractMax(){        E desiredvalue  = myArray[1];        myArray[1]      = myArray[length];        myArray[length] = null;        length--;        heapify(1);        return desiredvalue;    }    public void heapify(int i){        if(i*2 > length){            return; //has no children        }        int position1 = i*2;        int position2 = i*2+1;        if(position2 > length){            swap(i,position1);            heapify(position1);        }else if(myArray[position1].compareTo(myArray[position2]) == 1){            swap(i,position1);            heapify(position1);        } else if(myArray[position1].compareTo(myArray[position2]) == -1){            swap(i,position2);            heapify(position2);        }    }        public void buildHeap(E[] newArr){        setArray(newArr);        heapify(length/2);	}}