package assignment5;
import java.awt.*;

import javax.swing.*;

import java.awt.event.*;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.InputStreamReader;
import java.net.URL;
import java.net.URLConnection;
import java.security.KeyStore.Entry;
import java.util.ArrayList;
import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.ArrayList;

import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.border.Border;

import javax.swing.JFrame;


public class assingment5 extends JFrame{
	static ArrayList<person> data = new ArrayList<person>();
		
		public assignment5() {
			readFile();
			JFrame frame = new JFrame("Sorting");
			frame.setLayout(new BorderLayout());
			Container c = frame.getContentPane();
			c.setPreferredSize(new Dimension(150, 80));

			JPanel buttonPanel = new JPanel();
			JPanel textPanel = new JPanel();
			JPanel padding = new JPanel();
			Border padd = BorderFactory.createEmptyBorder(10, 10, 10, 10);

			buttonPanel.setLayout(new BoxLayout(buttonPanel, BoxLayout.Y_AXIS));
			textPanel.setLayout(new BoxLayout(textPanel, BoxLayout.Y_AXIS));

			final JLabel mergeSortText = new JLabel("0.000000");
			final JLabel selectionSortText = new JLabel("00.000000");

			JButton selectionSortButton = new JButton("Selection Sort");
			selectionSortButton.addActionListener(new ActionListener() {
				@Override
				public void actionPerformed(ActionEvent ev) {
					// defining a new thread with its own run method
							long startTime = System.nanoTime();
							ArrayList<person> sortedArrayList = selectionSort(data);
							double elapsedTimeSeconds = ((System.nanoTime() - startTime) / 1000000000.0);
							if (checkSort(sortedArrayList)) {
								selectionSortText.setText(Double
										.toString(elapsedTimeSeconds));
							} else {
								System.out.println("Error sorting");
							}
						}
			});
			JButton mergeSortButton = new JButton("Merge Sort");
			mergeSortButton.addActionListener(new ActionListener() {
				@Override
				public void actionPerformed(ActionEvent ev) {
						public void run() {
							ArrayList<Entry> arrayList = cloneArrayList(data);
							long startTime = System.nanoTime();
							ArrayList<Entry> sortedArrayList = mergeSort(arrayList);
							double elapsedTimeSeconds = ((System.nanoTime() - startTime) / 1000000000.0);
							if (checkSort(sortedArrayList)) {
								mergeSortText.setText(Double
										.toString(elapsedTimeSeconds));
								;
							} else {
								System.out.println("Error sorting");
							}
					};
				}
			);

			buttonPanel.add(selectionSortButton, BorderLayout.NORTH);
			buttonPanel.add(mergeSortButton, BorderLayout.SOUTH);
			textPanel.add(selectionSortText);
			textPanel.add(mergeSortText);

			c.add(buttonPanel, BorderLayout.WEST);
			c.add(textPanel, BorderLayout.EAST);
			frame.pack();
			frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
			frame.setVisible(true);

			
		}
		private static void readFile(){		
		    try {
		    	URL dataSrc = new URL(
		    			"https://www.cs.uoregon.edu/Classes/14F/cis212/assignments/phonebook.txt");
		    URLConnection conn = dataSrc.openConnection();
		    	BufferedReader br = new BufferedReader(
		    			new InputStreamReader(conn.getInputStream())); 
		    	
		    //	BufferedReader brFile = new BufferedReader(
		    			//new FileReader("Usr/meng/Desktop/data.txt"));
		    	
		        String line = br.readLine();
		        int temp = 100;
		        while (line != null) {
		        		String[] parts=line.split(" ");
		        		parts[1] = parts[1].replace(",", "");
		        		person ent = new person(Integer.parseInt(parts[0]), parts[1], parts[2]);
		        		data.add(ent);
		            line = br.readLine();
		        }	       
		        br.close();
		    }
		    catch(Exception e){
		    	System.err.print("File reading error!");
		    	System.err.print(e.getMessage());
		    }
		    
		}
		
		public ArrayList<person> selectionSort(ArrayList<person> data){
			int n = data.size();
			ArrayList<person> newarray = data;
			int i, j, minIndex;
			for (i = 0; i < n - 1; i++) {
				minIndex = i;
				for (j = i + 1; j < n; j++) {
					if ((newarray.get(j)).getLastName().compareTo(
							newarray.get(minIndex).getLastName()) < 0) {
						minIndex = j;
					}
				}
				if (minIndex != j) {
					person temp = newarray.get(i);
					newarray.set(i, newarray.get(minIndex));
					newarray.set(minIndex, temp);
				}
			}
			for(int k = 0; k < newarray.size(); k++){
				person.print(newarray.get(k));
			}
			return newarray;
		}
		
		public ArrayList<person> mergeSort(ArrayList<person> data){
			if (data.size() > 1){
				ArrayList<person> newarray = data;
				int n = newarray.size();
				ArrayList<person> left = new ArrayList<person>();
				ArrayList<person> right = new ArrayList<person>();
				int split = n / 2;
				
				for (int i = split; i < n; i++){
					left.add(newarray.get(i));
				}
				
				for (int i = split; i < n; i++){
					right.add(newarray.get(i));
				}
				left = mergeSort(left);
				right = mergeSort(right);
				ArrayList<person> result = merge(left, right);
				return result;
			}
			
			public ArrayList<Entry> merge(ArrayList<Entry> left, ArrayList<Entry> right){
				ArrayList<person> mergedarray = new ArrayList<person>();
				while (left.size() > 0 || right.size() > 0 ){
					int lsize = left.size(), rsize = right.size();
					
					if (lside > 0 && rside > 0){
						if (left.get(0).getName().compareTo(right.get(0).getName()) < 0) {
							mergedarray.add(left.get(0));
							left.remove(0);
						} else {
							mergedarray.add(right.get(0));
							right.remove(0);
						}
					} else if (lsize > 0){
						mergedarray.add(left.get(0));
						left.remove(0);
					} else if (rsize > 0){
						mergedarray.add(right.get(0));
						right.remove(0);
					}
				}
				return mergedarray;
		}
		}
		public static void main(String[] args) {
			assignment5 r = new assignment5();
		}
}