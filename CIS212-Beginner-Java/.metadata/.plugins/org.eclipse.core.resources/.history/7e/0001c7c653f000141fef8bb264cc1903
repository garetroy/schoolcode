
import java.awt.Graphics;
import java.awt.Point;
import java.awt.Stroke;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.util.ArrayList;

import javax.swing.JPanel;

import java.awt.Color;

public class PaintCanvas extends JPanel{

	private static final long serialVersionUID = 1L;
		public Color _color;
		public int _size;
		public ArrayList<Stroke> _strokes = new ArrayList<Stroke>();
		public ArrayList<Point> _points = new ArrayList<Point>();
		
		public  PaintCanvas() {
			_color = Color.BLACK;
			_size = 10;
			

			addMouseMotionListener(new MouseMotionAdapter() {
				@Override
				public void mouseDragged(MouseEvent ev) {
					_points.add(ev.getPoint());
					repaint();
				}
			});
		}
		
		@Override
		public void paintComponent(Graphics g) {
			super.paintComponent(g);
			// what this does is first runs through any saved brush strokes and
			// paints them on the screen (if any), then paints on the newer strokes
			// so that they appear on top of the older ones!
			for (Stroke stroke : _strokeArrayList) {
				
				g.setColor(stroke.returnColor());
				int tempSize = stroke.returnSize();
				for (Point point : stroke.returnStroke()) {
					g.fillOval(point.x, point.y, tempSize, tempSize);
				}
			}
			g.setColor(_color);
			for (Point point : _pointArrayList) {
				g.fillOval(point.x, point.y, _size, _size);
			}

		}

		class Stroke {
			// just a class that is used to basically "record" brush strokes
			// where the array list is a bunch of mouse points the user
			// dragged over.
			private ArrayList<Point> _stroke;
			private Color _color;
			private int _size;

			public Stroke(ArrayList<Point> stroke, Color color, int size) {
				_stroke = stroke;
				_color = color;
				_size = size;
			}

			public ArrayList<Point> returnStroke() {
				return _stroke;
			}

			public Color returnColor() {
				return _color;
			}

			public int returnSize() {
				return _size;
			}

		}
		
		public void pinkdraw() {
			if (_color != Color.PINK){
				_color = Color.PINK;

			}
		}
		
		public void greendraw() {
			if (_color != Color.GREEN){
				_color = Color.GREEN;
			}
		}
		
		public void blackdraw() {
			if (_color != Color.BLACK){
				_color = Color.BLACK;
			}
		}
		
		public void reddraw() {
			if (_color != Color.RED){
				_color = Color.RED;
			}
		}
		
		public void yellowdraw(){
			if (_color != Color.YELLOW){
				_color = Color.YELLOW;
			}
		}
		
		public void whitedraw(){
			if (_color != Color.WHITE){
				_color = Color.WHITE;
			}
		}
		
		public void orangedraw(){
			if (_color != Color.ORANGE){
				_color = Color.ORANGE;
			}
		}
		
		public void magentadraw(){
			if (_color != Color.MAGENTA){
				_color = Color.MAGENTA;
			}
		}
		
		public void smalldraw(){
			if (_size != 5){
				_size = 5;
			}
		}
		
		public void mediumdraw(){
			if (_size != 10){
				_size = 10;
			}
		}
		
		public void largedraw(){
			if (_size != 20){
				_size = 20;
			}
		}

		public void hugedraw(){
			if (_size != 40){
				_size = 40;
			}
		}
		
		public void crazybigdraw(){
			if (_size != 80){
				_size = 80;
			}
		}
		
		public void woahtheredraw(){
			if (_size != 120){
				_size = 120;
			}
		}
		
		public void overboarddraw(){
			if (_size != 200){
				_size = 200;
			}
		}
		public void cleardraw(){
			_strokes = new ArrayList<Stroke>();
			_points = new ArrayList<Point>();
			repaint();
		}
}

